from collections import deque

class FrontMiddleBack:
    def __init__(self):
        self.front = deque()
        self.back = deque()

    def pushFront(self, val: int) -> None:
        self.front.appendleft(val)
        self._rebalance()

    def pushMiddle(self, val: int) -> None:
        if len(self.front) > len(self.back):
            self.back.appendleft(self.front.pop())
        self.front.append(val)

    def pushBack(self, val: int) -> None:
        self.back.append(val)
        self._rebalance()

    def popFront(self) -> int:
        if self.front:
            return self.front.popleft()
        if self.back:
            return self.back.popleft()
        return -1

    def popMiddle(self) -> int:
        if not self.front:
            return -1

        if len(self.front) > len(self.back):
            return self.front.pop()
        return self.back.popleft()

    def popBack(self) -> int:
        if self.back:
            return self.back.pop()
        if self.front:
            return self.front.pop()
        return -1

    def _rebalance(self) -> None:
        if len(self.front) > len(self.back) + 1:
            self.back.appendleft(self.front.pop())
        elif len(self.back) > len(self.front):
            self.front.append(self.back.popleft())

# Example
fmb = FrontMiddleBack()
fmb.pushFront(1)
fmb.pushBack(2)
fmb.pushMiddle(3)
fmb.pushMiddle(4)
print(fmb.popFront())  # Output: 1
print(fmb.popMiddle())  # Output: 3
print(fmb.popMiddle())  # Output: 4
print(fmb.popBack())  # Output: 2
print(fmb.popFront())  # Output: -1 (The queue is empty)


